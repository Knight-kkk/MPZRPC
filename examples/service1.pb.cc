// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service1.proto

#include "service1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_service1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgcode_service1_2eproto;
namespace examples {
class argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<args> _instance;
} _args_default_instance_;
class msgcodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgcode> _instance;
} _msgcode_default_instance_;
class retvalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<retval> _instance;
} _retval_default_instance_;
}  // namespace examples
static void InitDefaultsscc_info_args_service1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::_args_default_instance_;
    new (ptr) ::examples::args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::args::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_args_service1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_args_service1_2eproto}, {}};

static void InitDefaultsscc_info_msgcode_service1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::_msgcode_default_instance_;
    new (ptr) ::examples::msgcode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::msgcode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgcode_service1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgcode_service1_2eproto}, {}};

static void InitDefaultsscc_info_retval_service1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::_retval_default_instance_;
    new (ptr) ::examples::retval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::retval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_retval_service1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_retval_service1_2eproto}, {
      &scc_info_msgcode_service1_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_service1_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_service1_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_service1_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_service1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::examples::args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::args, input1_),
  PROTOBUF_FIELD_OFFSET(::examples::args, input2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::examples::msgcode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::msgcode, code_),
  PROTOBUF_FIELD_OFFSET(::examples::msgcode, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::examples::retval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::retval, retcode_),
  PROTOBUF_FIELD_OFFSET(::examples::retval, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::examples::args)},
  { 7, -1, sizeof(::examples::msgcode)},
  { 14, -1, sizeof(::examples::retval)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::examples::_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::examples::_msgcode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::examples::_retval_default_instance_),
};

const char descriptor_table_protodef_service1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016service1.proto\022\010examples\"&\n\004args\022\016\n\006in"
  "put1\030\001 \001(\014\022\016\n\006input2\030\002 \001(\014\"$\n\007msgcode\022\014\n"
  "\004code\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\"9\n\006retval\022\"\n\007re"
  "tcode\030\001 \001(\0132\021.examples.msgcode\022\013\n\003ret\030\002 "
  "\001(\0102\213\001\n\010service1\022)\n\005func1\022\016.examples.arg"
  "s\032\020.examples.retval\022)\n\005func2\022\016.examples."
  "args\032\020.examples.retval\022)\n\005func3\022\016.exampl"
  "es.args\032\020.examples.retvalB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_service1_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_service1_2eproto_sccs[3] = {
  &scc_info_args_service1_2eproto.base,
  &scc_info_msgcode_service1_2eproto.base,
  &scc_info_retval_service1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_service1_2eproto_once;
static bool descriptor_table_service1_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service1_2eproto = {
  &descriptor_table_service1_2eproto_initialized, descriptor_table_protodef_service1_2eproto, "service1.proto", 318,
  &descriptor_table_service1_2eproto_once, descriptor_table_service1_2eproto_sccs, descriptor_table_service1_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_service1_2eproto::offsets,
  file_level_metadata_service1_2eproto, 3, file_level_enum_descriptors_service1_2eproto, file_level_service_descriptors_service1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_service1_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_service1_2eproto), true);
namespace examples {

// ===================================================================

void args::InitAsDefaultInstance() {
}
class args::_Internal {
 public:
};

args::args()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.args)
}
args::args(const args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input1().empty()) {
    input1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input1_);
  }
  input2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input2().empty()) {
    input2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input2_);
  }
  // @@protoc_insertion_point(copy_constructor:examples.args)
}

void args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_args_service1_2eproto.base);
  input1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

args::~args() {
  // @@protoc_insertion_point(destructor:examples.args)
  SharedDtor();
}

void args::SharedDtor() {
  input1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const args& args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_args_service1_2eproto.base);
  return *internal_default_instance();
}


void args::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes input1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_input1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes input1 = 1;
  if (this->input1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_input1(), target);
  }

  // bytes input2 = 2;
  if (this->input2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_input2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.args)
  return target;
}

size_t args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes input1 = 1;
  if (this->input1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input1());
  }

  // bytes input2 = 2;
  if (this->input2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.args)
  GOOGLE_DCHECK_NE(&from, this);
  const args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.args)
    MergeFrom(*source);
  }
}

void args::MergeFrom(const args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input1().size() > 0) {

    input1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input1_);
  }
  if (from.input2().size() > 0) {

    input2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input2_);
  }
}

void args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void args::CopyFrom(const args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool args::IsInitialized() const {
  return true;
}

void args::InternalSwap(args* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input1_.Swap(&other->input1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input2_.Swap(&other->input2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgcode::InitAsDefaultInstance() {
}
class msgcode::_Internal {
 public:
};

msgcode::msgcode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.msgcode)
}
msgcode::msgcode(const msgcode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:examples.msgcode)
}

void msgcode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgcode_service1_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

msgcode::~msgcode() {
  // @@protoc_insertion_point(destructor:examples.msgcode)
  SharedDtor();
}

void msgcode::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgcode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgcode& msgcode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgcode_service1_2eproto.base);
  return *internal_default_instance();
}


void msgcode::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.msgcode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* msgcode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgcode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.msgcode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.msgcode)
  return target;
}

size_t msgcode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.msgcode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgcode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.msgcode)
  GOOGLE_DCHECK_NE(&from, this);
  const msgcode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgcode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.msgcode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.msgcode)
    MergeFrom(*source);
  }
}

void msgcode::MergeFrom(const msgcode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.msgcode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void msgcode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.msgcode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgcode::CopyFrom(const msgcode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.msgcode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgcode::IsInitialized() const {
  return true;
}

void msgcode::InternalSwap(msgcode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msgcode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void retval::InitAsDefaultInstance() {
  ::examples::_retval_default_instance_._instance.get_mutable()->retcode_ = const_cast< ::examples::msgcode*>(
      ::examples::msgcode::internal_default_instance());
}
class retval::_Internal {
 public:
  static const ::examples::msgcode& retcode(const retval* msg);
};

const ::examples::msgcode&
retval::_Internal::retcode(const retval* msg) {
  return *msg->retcode_;
}
retval::retval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.retval)
}
retval::retval(const retval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_retcode()) {
    retcode_ = new ::examples::msgcode(*from.retcode_);
  } else {
    retcode_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:examples.retval)
}

void retval::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_retval_service1_2eproto.base);
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(ret_));
}

retval::~retval() {
  // @@protoc_insertion_point(destructor:examples.retval)
  SharedDtor();
}

void retval::SharedDtor() {
  if (this != internal_default_instance()) delete retcode_;
}

void retval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const retval& retval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_retval_service1_2eproto.base);
  return *internal_default_instance();
}


void retval::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.retval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && retcode_ != nullptr) {
    delete retcode_;
  }
  retcode_ = nullptr;
  ret_ = false;
  _internal_metadata_.Clear();
}

const char* retval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .examples.msgcode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_retcode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* retval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.retval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .examples.msgcode retcode = 1;
  if (this->has_retcode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::retcode(this), target, stream);
  }

  // bool ret = 2;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.retval)
  return target;
}

size_t retval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.retval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .examples.msgcode retcode = 1;
  if (this->has_retcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *retcode_);
  }

  // bool ret = 2;
  if (this->ret() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void retval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.retval)
  GOOGLE_DCHECK_NE(&from, this);
  const retval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<retval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.retval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.retval)
    MergeFrom(*source);
  }
}

void retval::MergeFrom(const retval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.retval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_retcode()) {
    _internal_mutable_retcode()->::examples::msgcode::MergeFrom(from._internal_retcode());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void retval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.retval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void retval::CopyFrom(const retval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.retval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool retval::IsInitialized() const {
  return true;
}

void retval::InternalSwap(retval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata retval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

service1::~service1() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* service1::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service1_2eproto);
  return file_level_service_descriptors_service1_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* service1::GetDescriptor() {
  return descriptor();
}

void service1::func1(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::examples::args*,
                         ::examples::retval*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method func1() not implemented.");
  done->Run();
}

void service1::func2(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::examples::args*,
                         ::examples::retval*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method func2() not implemented.");
  done->Run();
}

void service1::func3(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::examples::args*,
                         ::examples::retval*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method func3() not implemented.");
  done->Run();
}

void service1::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service1_2eproto[0]);
  switch(method->index()) {
    case 0:
      func1(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::examples::args*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::examples::retval*>(
                 response),
             done);
      break;
    case 1:
      func2(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::examples::args*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::examples::retval*>(
                 response),
             done);
      break;
    case 2:
      func3(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::examples::args*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::examples::retval*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& service1::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::examples::args::default_instance();
    case 1:
      return ::examples::args::default_instance();
    case 2:
      return ::examples::args::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& service1::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::examples::retval::default_instance();
    case 1:
      return ::examples::retval::default_instance();
    case 2:
      return ::examples::retval::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

service1_Stub::service1_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
service1_Stub::service1_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
service1_Stub::~service1_Stub() {
  if (owns_channel_) delete channel_;
}

void service1_Stub::func1(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::examples::args* request,
                              ::examples::retval* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void service1_Stub::func2(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::examples::args* request,
                              ::examples::retval* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void service1_Stub::func3(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::examples::args* request,
                              ::examples::retval* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace examples
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::examples::args* Arena::CreateMaybeMessage< ::examples::args >(Arena* arena) {
  return Arena::CreateInternal< ::examples::args >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::msgcode* Arena::CreateMaybeMessage< ::examples::msgcode >(Arena* arena) {
  return Arena::CreateInternal< ::examples::msgcode >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::retval* Arena::CreateMaybeMessage< ::examples::retval >(Arena* arena) {
  return Arena::CreateInternal< ::examples::retval >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
