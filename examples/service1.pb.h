// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service1_2eproto;
namespace examples {
class args;
class argsDefaultTypeInternal;
extern argsDefaultTypeInternal _args_default_instance_;
class msgcode;
class msgcodeDefaultTypeInternal;
extern msgcodeDefaultTypeInternal _msgcode_default_instance_;
class retval;
class retvalDefaultTypeInternal;
extern retvalDefaultTypeInternal _retval_default_instance_;
}  // namespace examples
PROTOBUF_NAMESPACE_OPEN
template<> ::examples::args* Arena::CreateMaybeMessage<::examples::args>(Arena*);
template<> ::examples::msgcode* Arena::CreateMaybeMessage<::examples::msgcode>(Arena*);
template<> ::examples::retval* Arena::CreateMaybeMessage<::examples::retval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace examples {

// ===================================================================

class args :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:examples.args) */ {
 public:
  args();
  virtual ~args();

  args(const args& from);
  args(args&& from) noexcept
    : args() {
    *this = ::std::move(from);
  }

  inline args& operator=(const args& from) {
    CopyFrom(from);
    return *this;
  }
  inline args& operator=(args&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const args& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const args* internal_default_instance() {
    return reinterpret_cast<const args*>(
               &_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(args& a, args& b) {
    a.Swap(&b);
  }
  inline void Swap(args* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline args* New() const final {
    return CreateMaybeMessage<args>(nullptr);
  }

  args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const args& from);
  void MergeFrom(const args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "examples.args";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service1_2eproto);
    return ::descriptor_table_service1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInput1FieldNumber = 1,
    kInput2FieldNumber = 2,
  };
  // bytes input1 = 1;
  void clear_input1();
  const std::string& input1() const;
  void set_input1(const std::string& value);
  void set_input1(std::string&& value);
  void set_input1(const char* value);
  void set_input1(const void* value, size_t size);
  std::string* mutable_input1();
  std::string* release_input1();
  void set_allocated_input1(std::string* input1);
  private:
  const std::string& _internal_input1() const;
  void _internal_set_input1(const std::string& value);
  std::string* _internal_mutable_input1();
  public:

  // bytes input2 = 2;
  void clear_input2();
  const std::string& input2() const;
  void set_input2(const std::string& value);
  void set_input2(std::string&& value);
  void set_input2(const char* value);
  void set_input2(const void* value, size_t size);
  std::string* mutable_input2();
  std::string* release_input2();
  void set_allocated_input2(std::string* input2);
  private:
  const std::string& _internal_input2() const;
  void _internal_set_input2(const std::string& value);
  std::string* _internal_mutable_input2();
  public:

  // @@protoc_insertion_point(class_scope:examples.args)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service1_2eproto;
};
// -------------------------------------------------------------------

class msgcode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:examples.msgcode) */ {
 public:
  msgcode();
  virtual ~msgcode();

  msgcode(const msgcode& from);
  msgcode(msgcode&& from) noexcept
    : msgcode() {
    *this = ::std::move(from);
  }

  inline msgcode& operator=(const msgcode& from) {
    CopyFrom(from);
    return *this;
  }
  inline msgcode& operator=(msgcode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msgcode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msgcode* internal_default_instance() {
    return reinterpret_cast<const msgcode*>(
               &_msgcode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(msgcode& a, msgcode& b) {
    a.Swap(&b);
  }
  inline void Swap(msgcode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msgcode* New() const final {
    return CreateMaybeMessage<msgcode>(nullptr);
  }

  msgcode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msgcode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msgcode& from);
  void MergeFrom(const msgcode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msgcode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "examples.msgcode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service1_2eproto);
    return ::descriptor_table_service1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:examples.msgcode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service1_2eproto;
};
// -------------------------------------------------------------------

class retval :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:examples.retval) */ {
 public:
  retval();
  virtual ~retval();

  retval(const retval& from);
  retval(retval&& from) noexcept
    : retval() {
    *this = ::std::move(from);
  }

  inline retval& operator=(const retval& from) {
    CopyFrom(from);
    return *this;
  }
  inline retval& operator=(retval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const retval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const retval* internal_default_instance() {
    return reinterpret_cast<const retval*>(
               &_retval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(retval& a, retval& b) {
    a.Swap(&b);
  }
  inline void Swap(retval* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline retval* New() const final {
    return CreateMaybeMessage<retval>(nullptr);
  }

  retval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<retval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const retval& from);
  void MergeFrom(const retval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(retval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "examples.retval";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service1_2eproto);
    return ::descriptor_table_service1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // .examples.msgcode retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  const ::examples::msgcode& retcode() const;
  ::examples::msgcode* release_retcode();
  ::examples::msgcode* mutable_retcode();
  void set_allocated_retcode(::examples::msgcode* retcode);
  private:
  const ::examples::msgcode& _internal_retcode() const;
  ::examples::msgcode* _internal_mutable_retcode();
  public:

  // bool ret = 2;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:examples.retval)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::examples::msgcode* retcode_;
  bool ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service1_2eproto;
};
// ===================================================================

class service1_Stub;

class service1 : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline service1() {};
 public:
  virtual ~service1();

  typedef service1_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void func1(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::examples::args* request,
                       ::examples::retval* response,
                       ::google::protobuf::Closure* done);
  virtual void func2(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::examples::args* request,
                       ::examples::retval* response,
                       ::google::protobuf::Closure* done);
  virtual void func3(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::examples::args* request,
                       ::examples::retval* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(service1);
};

class service1_Stub : public service1 {
 public:
  service1_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  service1_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~service1_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements service1 ------------------------------------------

  void func1(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::examples::args* request,
                       ::examples::retval* response,
                       ::google::protobuf::Closure* done);
  void func2(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::examples::args* request,
                       ::examples::retval* response,
                       ::google::protobuf::Closure* done);
  void func3(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::examples::args* request,
                       ::examples::retval* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(service1_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// args

// bytes input1 = 1;
inline void args::clear_input1() {
  input1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& args::input1() const {
  // @@protoc_insertion_point(field_get:examples.args.input1)
  return _internal_input1();
}
inline void args::set_input1(const std::string& value) {
  _internal_set_input1(value);
  // @@protoc_insertion_point(field_set:examples.args.input1)
}
inline std::string* args::mutable_input1() {
  // @@protoc_insertion_point(field_mutable:examples.args.input1)
  return _internal_mutable_input1();
}
inline const std::string& args::_internal_input1() const {
  return input1_.GetNoArena();
}
inline void args::_internal_set_input1(const std::string& value) {
  
  input1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void args::set_input1(std::string&& value) {
  
  input1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:examples.args.input1)
}
inline void args::set_input1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:examples.args.input1)
}
inline void args::set_input1(const void* value, size_t size) {
  
  input1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:examples.args.input1)
}
inline std::string* args::_internal_mutable_input1() {
  
  return input1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* args::release_input1() {
  // @@protoc_insertion_point(field_release:examples.args.input1)
  
  return input1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void args::set_allocated_input1(std::string* input1) {
  if (input1 != nullptr) {
    
  } else {
    
  }
  input1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input1);
  // @@protoc_insertion_point(field_set_allocated:examples.args.input1)
}

// bytes input2 = 2;
inline void args::clear_input2() {
  input2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& args::input2() const {
  // @@protoc_insertion_point(field_get:examples.args.input2)
  return _internal_input2();
}
inline void args::set_input2(const std::string& value) {
  _internal_set_input2(value);
  // @@protoc_insertion_point(field_set:examples.args.input2)
}
inline std::string* args::mutable_input2() {
  // @@protoc_insertion_point(field_mutable:examples.args.input2)
  return _internal_mutable_input2();
}
inline const std::string& args::_internal_input2() const {
  return input2_.GetNoArena();
}
inline void args::_internal_set_input2(const std::string& value) {
  
  input2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void args::set_input2(std::string&& value) {
  
  input2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:examples.args.input2)
}
inline void args::set_input2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:examples.args.input2)
}
inline void args::set_input2(const void* value, size_t size) {
  
  input2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:examples.args.input2)
}
inline std::string* args::_internal_mutable_input2() {
  
  return input2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* args::release_input2() {
  // @@protoc_insertion_point(field_release:examples.args.input2)
  
  return input2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void args::set_allocated_input2(std::string* input2) {
  if (input2 != nullptr) {
    
  } else {
    
  }
  input2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input2);
  // @@protoc_insertion_point(field_set_allocated:examples.args.input2)
}

// -------------------------------------------------------------------

// msgcode

// int32 code = 1;
inline void msgcode::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 msgcode::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 msgcode::code() const {
  // @@protoc_insertion_point(field_get:examples.msgcode.code)
  return _internal_code();
}
inline void msgcode::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void msgcode::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:examples.msgcode.code)
}

// bytes msg = 2;
inline void msgcode::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msgcode::msg() const {
  // @@protoc_insertion_point(field_get:examples.msgcode.msg)
  return _internal_msg();
}
inline void msgcode::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:examples.msgcode.msg)
}
inline std::string* msgcode::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:examples.msgcode.msg)
  return _internal_mutable_msg();
}
inline const std::string& msgcode::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void msgcode::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msgcode::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:examples.msgcode.msg)
}
inline void msgcode::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:examples.msgcode.msg)
}
inline void msgcode::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:examples.msgcode.msg)
}
inline std::string* msgcode::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msgcode::release_msg() {
  // @@protoc_insertion_point(field_release:examples.msgcode.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msgcode::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:examples.msgcode.msg)
}

// -------------------------------------------------------------------

// retval

// .examples.msgcode retcode = 1;
inline bool retval::_internal_has_retcode() const {
  return this != internal_default_instance() && retcode_ != nullptr;
}
inline bool retval::has_retcode() const {
  return _internal_has_retcode();
}
inline void retval::clear_retcode() {
  if (GetArenaNoVirtual() == nullptr && retcode_ != nullptr) {
    delete retcode_;
  }
  retcode_ = nullptr;
}
inline const ::examples::msgcode& retval::_internal_retcode() const {
  const ::examples::msgcode* p = retcode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::examples::msgcode*>(
      &::examples::_msgcode_default_instance_);
}
inline const ::examples::msgcode& retval::retcode() const {
  // @@protoc_insertion_point(field_get:examples.retval.retcode)
  return _internal_retcode();
}
inline ::examples::msgcode* retval::release_retcode() {
  // @@protoc_insertion_point(field_release:examples.retval.retcode)
  
  ::examples::msgcode* temp = retcode_;
  retcode_ = nullptr;
  return temp;
}
inline ::examples::msgcode* retval::_internal_mutable_retcode() {
  
  if (retcode_ == nullptr) {
    auto* p = CreateMaybeMessage<::examples::msgcode>(GetArenaNoVirtual());
    retcode_ = p;
  }
  return retcode_;
}
inline ::examples::msgcode* retval::mutable_retcode() {
  // @@protoc_insertion_point(field_mutable:examples.retval.retcode)
  return _internal_mutable_retcode();
}
inline void retval::set_allocated_retcode(::examples::msgcode* retcode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete retcode_;
  }
  if (retcode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      retcode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retcode, submessage_arena);
    }
    
  } else {
    
  }
  retcode_ = retcode;
  // @@protoc_insertion_point(field_set_allocated:examples.retval.retcode)
}

// bool ret = 2;
inline void retval::clear_ret() {
  ret_ = false;
}
inline bool retval::_internal_ret() const {
  return ret_;
}
inline bool retval::ret() const {
  // @@protoc_insertion_point(field_get:examples.retval.ret)
  return _internal_ret();
}
inline void retval::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void retval::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:examples.retval.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace examples

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service1_2eproto
